package io.ballerina.persist.nodegenerator;

/**
 * Class encapsulating all the syntax/code lines related to generation scripts.
 *
 @since 0.1.0
 */
public class BalFileConstants {

    private BalFileConstants() {

    }
    public static final String ENTITIES = "entities";
    public static final String ENTITY_KEY = "key";
    public static final String PERSIST = "persist";
    public static final String FIELD_FORMAT_WITH_AUTO_G = "{columnName: \"%s\", 'type: %s, autoGenerated: %s}";
    public static final String FIELD_FORMAT_WITHOUT_AUTO_G = "{columnName: \"%s\", 'type: %s}";
    public static final String FIELD_NAME = "fieldName";
    public static final String FIELD_TYPE = "fieldType";
    public static final String AUTOGENERATED = "autoGenerated";
    public static final String ERROR = "error";
    public static final String IMPORT_AS_ENTITIES = "import %s as entities;";
    public static final String TYPE_FIELD_METADATA_MAP = "map<persist:FieldMetadata>";
    public static final String TAG_FIELD_METADATA = "fieldMetadata";
    public static final String INIT_MYSQL_CLIENT_LINE = "mysql:Client dbClient = check new (host = host, user = user," +
            " password = password, database = database, port = port);";
    public static final String INIT_PERSIST_CLIENT_LINE = "self.persistClient = check new (self.entityName, " +
            "self.tableName, self.fieldMetadata, self.keyFields, dbClient);";
    public static final String CREATE_SQL_RESULTS_LINE = "sql:ExecutionResult result = check " +
            "self.persistClient.runInsertQuery(value);";
    public static final String READ_BY_KEY_RETURN_LINE = "return (check self.persistClient" +
            ".runReadByKeyQuery(%s, key)).cloneWithType(%s);";
    public static final String READ_RUN_READ_QUERY_LINE = "stream<anydata, error?> result" +
            " = check self.persistClient.runReadQuery(%s, filter);";
    public static final String READ_RETURN_STREAM_LINE = "return new stream<%s, error?>(new %sStream(result));";
    public static final String UPDATE_RUN_UPDATE_QUERY_LINE = "_ = check self.persistClient.runUpdateQuery" +
            "('object, filter);";
    public static final String DELETE_RUN_DELETE_QUERY_LINE = "_ = check self.persistClient.runDeleteQuery(filter);";
    public static final String CLOSE_PERSIST_CLIENT_LINE = "return self.persistClient.close();";
    public static final String INIT_STREAM_LINE = "self.anydataStream = anydataStream;";
    public static final String NEXT_STREAM_RETURN_TYPE_LINE = "record {|%s value;|}|error?";
    public static final String NEXT_STREAM_STREAM_VALUE_LINE = "var streamValue = self.anydataStream.next();";

    public static final String NEXT_STREAM_IF_STATEMENT = "streamValue is ()";
    public static final String NEXT_STREAM_ELSE_IF_STATEMENT = "(streamValue is error)";
    public static final String NEXT_STREAM_RETURN_STREAM_VALUE = "return streamValue;";
    public static final String NEXT_STREAM_ELSE_STATEMENT_LINE = "record {|%s value;|} nextRecord = " +
            "{value: check streamValue.value.cloneWithType(%s)};";
    public static final String CLOSE_STREAM_CLOSE_STATEMENT_LINE = "return self.anydataStream.close();";

    public static final String CONFIGURABLE_PORT = "configurable int port = ?;";
    public static final String CONFIGURABLE_HOST = "configurable string host = ?;";
    public static final String CONFIGURABLE_USER = "configurable string user = ?;";
    public static final String CONFIGURABLE_PASSWORD = "configurable string password = ?;";
    public static final String CONFIGURABLE_DATABASE = "configurable string database = ?;";

}
